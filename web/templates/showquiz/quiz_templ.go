// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package showquiz

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/JDinABox/quiz-me/web"
)

func Head() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<title>Quizzes - Quiz Me</title><meta name=\"description\" content=\"Create and take quizzes\"><script type=\"module\" src=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(web.GetAssetUri("web/templates/showquiz/quiz.ts"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/showquiz/quiz.templ`, Line: 11, Col: 78}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Body(quizJson string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"flex grow justify-center\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, templ.Attributes{"x-data": fmt.Sprintf("quiz(%s)", quizJson)})
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "><div class=\"max-w-3xl flex flex-col grow my-1 sm:my-14 p-4 sm:p-6 bg-zinc-200 dark:bg-zinc-800 rounded-lg\"><div class=\"flex justify-between gap-2 mb-4\"><h1 class=\"h3\" x-text=\"name\"></h1><div class=\"flex flex-wrap justify-end gap-2 text-nowrap h-min font-medium text-sm text-white\"><div class=\"px-2 py-1 rounded-lg bg-blue-600 dark:bg-blue-700\" x-text=\"'Question: '+(currentQuestion+1)+'/'+maxQuestionsPerQuiz\"></div><div class=\"px-2 py-1 rounded-lg bg-green-700\" x-text=\"'Score: '+Number(Math.round(score+'e2')+'e-2');\"></div></div></div><template x-if=\"active\"><div class=\"flex flex-col grow space-y-4\"><div class=\"text-base sm:text-lg font-medium\" x-text=\"questions[currentQuestion].question\"></div><div class=\"flex flex-col space-y-4 sm:pt-2 font-medium\"><template x-for=\"(answer, index) in questions[currentQuestion].answers\" :key=\"index\"><button class=\"py-3 px-4 rounded-md transition-colors text-white\" x-text=\"answer\" @click=\"toggleAnswer(index)\" :disabled=\"leftToSelect <= 0\" :class=\"{ \n\t\t\t\t\t\t\t\t'bg-blue-700 hover:bg-blue-600 dark:bg-blue-700': buttonColor(index) === 'blue', \n\t\t\t\t\t\t\t\t'bg-zinc-700 hover:bg-zinc-600 disabled:bg-zinc-900 disabled:hover:bg-zinc-900': buttonColor(index) === 'gray',\n\t\t\t\t\t\t\t\t'bg-red-800': buttonColor(index) === 'red',\n\t\t\t\t\t\t\t\t'bg-green-800': buttonColor(index) === 'green',\n\t\t\t\t\t\t\t\t'bg-green-950': buttonColor(index) === 'green-dark',\n\t\t\t\t\t\t\t}\"></button></template></div><template x-if=\"leftToSelect <= 0\"><div class=\"flex flex-col grow justify-between gap-4 font-medium\"><div :class=\"(incorrect > 0)?\n\t\t\t\t\t\t\t'text-red-100 bg-red-950':\n\t\t\t\t\t\t\t'text-green-100 bg-green-950'\" class=\"rounded-lg py-3 px-4\"><div x-text=\"questions[currentQuestion].explanation\"></div></div><div class=\"flex justify-end\"><button class=\"px-2 py-1 bg-blue-700 dark:bg-blue-600 hover:bg-blue-800 dark:hover:bg-blue-700 transition-colors rounded-md text-zinc-50 hover:text-white\" @click=\"nextQuestion()\">Next</button></div></div></template></div></template><template x-if=\"!active\"><div class=\"flex flex-col items-center font-medium\"><div x-text=\"'You scored '+Math.round((score/maxQuestionsPerQuiz)*100)+'%'\"></div><button class=\"px-2 py-1 mt-4 bg-blue-700 dark:bg-blue-600 hover:bg-blue-800 dark:hover:bg-blue-700 transition-colors rounded-md text-zinc-50 hover:text-white\" @click=\"resetQuiz()\">Take again</button></div></template></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
